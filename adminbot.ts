import { Pool } from "pg";
import { Context, Markup, Telegraf } from "telegraf";
const token = "7622229101:AAELYXDJvJfAHkF9IuTx4IpNcZqvOe2VrU8";
const bot = new Telegraf(token);
const express = require("express"); // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();

// const pool = new Pool({
//   user: "postgres",
//   host: "localhost",
//   database: "casino-rocket-test",
//   password: "root",
//   port: 5432,
// });
const pool = new Pool({
  user: "postgres",
  host: "db",
  database: "casino-rocket",
  password: "root",
  port: 5432,
});

//
// INIT DB
//
app.use(express.json());

enum Actions {
  UsersControl = "users_control",
  PaymentsControl = "payments_control",
  ReferalsControl = "referals_control",
  GamesControl = "games_control",
  BackToMainMenu = "back_to_main_menu",
  AllUsers = "all_users",
}
enum NavStates {
  UsersControl = "users_control",
  PaymentsControl = "payments_control",
  ReferalsControl = "referals_control",
  GamesControl = "games_control",
  MainMenu = "back_to_main_menu",
  AllUsers = "all_users",
}

let currentNavState = NavStates.MainMenu;

// FUNCS GEN MENUS
function mainMenu() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        "üßë‚Äçü§ù‚Äçüßë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        Actions.UsersControl
      ),
    ],
    [
      Markup.button.callback(
        "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
        Actions.PaymentsControl
      ),
      Markup.button.callback(
        "üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏",
        Actions.ReferalsControl
      ),
    ],
    [Markup.button.callback("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏", Actions.GamesControl)],
  ]);
}

//

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  if (userId === 1217209518) {
    ctx.reply(`üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üöÄ`, mainMenu());
  }
});

bot.action(Actions.UsersControl, async (ctx) => {
  currentNavState = NavStates.UsersControl;
  ctx.editMessageText(
    `üßë‚Äçü§ù‚Äçüßë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`,
    Markup.inlineKeyboard([
      [Markup.button.callback("üßò –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", Actions.AllUsers)],
      [
        Markup.button.callback(
          "üßòüìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
          Actions.AllUsers
        ),
      ],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.BackToMainMenu)],
    ])
  );
});

bot.action(Actions.AllUsers, async (ctx) => {
  currentNavState = NavStates.AllUsers;
  const users = await pool.query(
    "SELECT * FROM users WHERE created_at >= NOW() - INTERVAL '1 day'"
  );
  ctx.editMessageText(
    `üßò –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n` +
      users.rows
        .map(
          (user) =>
            `ID: ${user.id}, –ù–∏–∫: ${user.username}, –ë–∞–ª–∞–Ω—Å: ${
              user.balance
            }, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.created_at}, –ü—Ä–∏–≥–ª–∞—à–µ–Ω: ${
              user?.refferal.id ? user?.refferal.id : "–ù–µ—Ç"
            }`
        )
        .join("\n")
  ),
    Markup.inlineKeyboard([
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
    ]);
});

const PORT = 5000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ))—Ç—É ${PORT}`);
});

bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply(
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
  );
});

bot
  .launch()
  .then(() => {
    console.log("ü§ñ Admin –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! :))");
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });
