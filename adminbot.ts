import { Pool } from "pg";
import { Context, Markup, Telegraf } from "telegraf";
const token = "7622229101:AAELYXDJvJfAHkF9IuTx4IpNcZqvOe2VrU8";
const bot = new Telegraf(token);
const express = require("express"); // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();

// const pool = new Pool({
//   user: "postgres",
//   host: "localhost",
//   database: "casino-rocket-test",
//   password: "root",
//   port: 5432,
// });
const pool = new Pool({
  user: "postgres",
  host: "db",
  database: "casino-rocket",
  password: "root",
  port: 5432,
});

//
// INIT DB
//
app.use(express.json());

enum Actions {
  UsersControl = "users_control",
  PaymentsControl = "payments_control",
  ReferalsControl = "referals_control",
  GamesControl = "games_control",
  BackToMainMenu = "back_to_main_menu",
  AllUsers = "all_users",
  TodayUsers = "today_users",
  ChangeUserBalance = "change_user_balance",
  ChangeUserBalanceConfirm = "change_user_balance_confirm",
  ChangeUserBalanceAmmount = "change_user_balance_ammount",
}
enum NavStates {
  UsersControl = "users_control",
  PaymentsControl = "payments_control",
  ReferalsControl = "referals_control",
  GamesControl = "games_control",
  MainMenu = "back_to_main_menu",
  AllUsers = "all_users",
  TodayUsers = "today_users",
  ChangeUserBalance = "change_user_balance",
  ChangeUserBalanceConfirm = "change_user_balance_confirm",
  ChangeUserBalanceAmmount = "change_user_balance_ammount",
}

let currentNavState = NavStates.MainMenu;

// FUNCS GEN MENUS
function mainMenu() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback(
        "üßë‚Äçü§ù‚Äçüßë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        Actions.UsersControl
      ),
    ],
    [
      Markup.button.callback(
        "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
        Actions.PaymentsControl
      ),
      Markup.button.callback(
        "üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏",
        Actions.ReferalsControl
      ),
    ],
    [Markup.button.callback("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏", Actions.GamesControl)],
  ]);
}

//

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  if (userId === 1217209518) {
    ctx.reply(`üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üöÄ`, mainMenu());
  }
});

bot.action(Actions.UsersControl, async (ctx) => {
  currentNavState = NavStates.UsersControl;
  ctx.editMessageText(
    `üßë‚Äçü§ù‚Äçüßë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`,
    Markup.inlineKeyboard([
      [Markup.button.callback("üßò –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", Actions.AllUsers)],
      [
        Markup.button.callback(
          "üßòüìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è",
          Actions.TodayUsers
        ),
      ],
      [Markup.button.callback("üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", Actions.ChangeUserBalance)],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.BackToMainMenu)],
    ])
  );
});

bot.action(Actions.BackToMainMenu, async (ctx) => {
  currentNavState = NavStates.MainMenu;
  ctx.editMessageText(`üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üöÄ`, mainMenu());
});

bot.action(Actions.TodayUsers, async (ctx) => {
  currentNavState = NavStates.TodayUsers;
  const users = await pool.query(
    "SELECT * FROM users WHERE created_at >= NOW() - INTERVAL '1 day'"
  );

  ctx.editMessageText(
    `üßòüìÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n` +
      users.rows
        .map((user) => {
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
          const formattedDate = new Date(user.created_at).toLocaleString(
            "en-US",
            {
              month: "short",
              day: "numeric",
              hour: "2-digit",
              minute: "2-digit",
            }
          );

          return (
            `*ID:* ${user?.user_id}\n` +
            `*–ë–∞–ª–∞–Ω—Å:* ${user.balance} USDT\n` +
            `*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${formattedDate}\n` +
            `*–ü—Ä–∏–≥–ª–∞—à–µ–Ω:* ${user?.referrer_id ? user?.refferal.id : "–ù–µ—Ç"}\n` +
            `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`
          );
        })
        .join("\n"),
    {
      parse_mode: "Markdown", // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
        ],
      },
    }
  );
});

bot.action(Actions.AllUsers, async (ctx) => {
  currentNavState = NavStates.AllUsers;
  const users = await pool.query("SELECT * FROM users");

  const userMessages = await Promise.all(
    users.rows.map(async (user) => {
      const formattedDate = new Date(user.created_at).toLocaleString("en-US", {
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });

      const depositsRes = await pool.query(
        "SELECT * FROM deposits WHERE user_id = $1",
        [user.user_id]
      );
      const withdrawsRes = await pool.query(
        "SELECT * FROM withdraws WHERE user_id = $1",
        [user.user_id]
      );

      const deposits = depositsRes.rows;
      const withdraws = withdrawsRes.rows;

      const totalDeposits = deposits.reduce(
        (sum, d) => sum + Number(d.amount || 0),
        0
      );
      const totalWithdraws = withdraws.reduce(
        (sum, w) => sum + Number(w.sum || 0),
        0
      );
      const ratio = totalDeposits - totalWithdraws;

      return (
        `*ID:* ${user?.user_id}\n` +
        `*–ë–∞–ª–∞–Ω—Å:* ${user.balance} USDT\n` +
        `*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${formattedDate}\n` +
        `*–ü—Ä–∏–≥–ª–∞—à–µ–Ω:* ${user?.referrer_id ? user?.referrer_id : "–ù–µ—Ç"}\n\n` +
        `*–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:* ${ratio} USDT\n`
      );
    })
  );

  ctx.editMessageText(`üßò *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n${userMessages.join("")}`, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
      ],
    },
  });
});

bot.action(Actions.ChangeUserBalance, async (ctx) => {
  currentNavState = NavStates.ChangeUserBalance;
  ctx.editMessageText(
    "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    Markup.inlineKeyboard([
      Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl),
    ])
  );
});

//MAKE HERE
bot.hears(/^\d+$/, async (ctx) => {
  const userId = Number(ctx.match[0]);
  const user = await pool.query("SELECT * FROM users WHERE user_id = $1", [
    userId,
  ]);
  if (currentNavState === NavStates.ChangeUserBalanceAmmount) {
    const amount = ctx.match[0];
    const user = await pool.query("SELECT * FROM users WHERE user_id = $1", [
      userId,
    ]);
    if (user.rows.length === 0) {
      return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", {
        reply_markup: {
          inline_keyboard: [
            [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
          ],
        },
      });
    }
    const userBalance = user.rows[0].balance;
    const newBalance = userBalance + Number(amount);
    await pool.query("UPDATE users SET balance = $1 WHERE user_id = $2", [
      newBalance,
      userId,
    ]);
    ctx.reply(
      `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newBalance} USDT`,
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
      ])
    );
  }
  if (user.rows.length === 0) {
    return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", {
      reply_markup: {
        inline_keyboard: [
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
        ],
      },
    });
  }

  ctx.editMessageText(
    `*ID:* ${userId}\n` +
      `*–ë–∞–ª–∞–Ω—Å:* ${user.rows[0].balance} USDT\n\n` +
      {
        reply_markup: {
          inline_keyboard: [
            [
              Markup.button.callback(
                "üí≤ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                Actions.ChangeUserBalanceAmmount
              ),
            ],
            [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
          ],
        },
      }
  );

  currentNavState = NavStates.ChangeUserBalanceConfirm;
});

bot.action(Actions.ChangeUserBalanceAmmount, async (ctx) => {
  currentNavState = NavStates.ChangeUserBalanceAmmount;
  ctx.editMessageText(
    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
    Markup.inlineKeyboard([
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
    ])
  );
});
// Markup.inlineKeyboard([
//   [Markup.button.callback("üîô –ù–∞–∑–∞–¥", Actions.UsersControl)],
// ]);

const PORT = 5000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ))—Ç—É ${PORT}`);
});

bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply(
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
  );
});

bot
  .launch()
  .then(() => {
    console.log("ü§ñ Admin –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! :)");
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });
