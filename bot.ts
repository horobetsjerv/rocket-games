import { Pool } from "pg";
const CryptoBotAPI = require("crypto-bot-api");
import axios from "axios";
import { Context, Markup, Telegraf } from "telegraf";
// const token  TEST = "7509717750:AAG5oqYmwZfpcLylA17p3sL8LlowYblYe4s";
const token = "7373612386:AAH-v0u6ikMxnqGDlCXLufszU0PFT-r6Stg";
const bot = new Telegraf(token);
const cryptoPayToken = "359650:AAdsPFXPTA5b58WFzQAAHkDBHXuLMOomywO";
const cryptoPayApiUrl = "https://pay.crypt.bot/api";
const cryptoClient = new CryptoBotAPI(cryptoPayToken); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const express = require("express"); // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();

// const pool = new Pool({
//   user: "postgres",
//   host: "localhost",
//   database: "casino-rocket-test",
//   password: "root",
//   port: 5432,
// });
const pool = new Pool({
  user: "postgres",
  host: "db",
  database: "casino-rocket",
  password: "root",
  port: 5432,
});

async function initDatabase() {
  const maxRetries = 10;
  let retries = 0;

  while (retries < maxRetries) {
    try {
      await pool.query("SELECT 1"); // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      await pool.query(`
        CREATE TABLE IF NOT EXISTS users (
          user_id BIGINT PRIMARY KEY,
          selected_mines_count VARCHAR(10) DEFAULT '3',
          nav_state VARCHAR(50) DEFAULT 'mainMenu',
          bet NUMERIC(10, 2) DEFAULT 0.0,
          selected_dice_type VARCHAR(10) DEFAULT 'even',
          balance NUMERIC(10, 2) DEFAULT 0.00,
          created_at TIMESTAMP DEFAULT NOW(),
          updated_at TIMESTAMP DEFAULT NOW()
        );
        
      `);
      console.log("–¢–∞–±–ª–∏—Ü–∞ 'users' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

      await pool.query(`
  ALTER TABLE users
  ADD COLUMN IF NOT EXISTS referrer_id BIGINT,
  ADD COLUMN IF NOT EXISTS referral_link VARCHAR(100) UNIQUE;
      `);

      console.log("–ü–æ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");

      await pool.query(`
        ALTER TABLE users
        ADD COLUMN IF NOT EXISTS refprocent BIGINT DEFAULT 10;
          `);

      console.log("–ü–æ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");

      try {
        await pool.query(`
          ALTER TABLE users
          ADD CONSTRAINT fk_referrer
          FOREIGN KEY (referrer_id) REFERENCES users(user_id)
        `);
        console.log("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ fk_referrer —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ");
      } catch (constraintErr: any) {
        if (constraintErr.code === "42710") {
          // –û—à–∏–±–∫–∞ 42701: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          console.log("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ fk_referrer —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        } else {
          throw constraintErr; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        }
      }

      await pool.query(`
        UPDATE users
        SET referral_link = 'https://t.me/games_rocket_bot?start=' || user_id
        WHERE referral_link IS NULL;
      `);

      try {
        await pool.query(`
        CREATE TABLE IF NOT EXISTS referrals (
          id SERIAL PRIMARY KEY,
          referral_link VARCHAR(100),
          bet NUMERIC(10, 2)
        )`);
        console.log("–¢–∞–±–ª–∏—Ü–∞ 'referrals' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã referrals (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
          err
        );
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–∫–∞—Ö

      //–¢–∞–±–ª–∏—Ü–∞ –≤—ñ–≤–æ–¥–æ–≤
      try {
        await pool.query(`CREATE TABLE IF NOT EXISTS withdraws (
          id SERIAL PRIMARY KEY,
          user_id BIGINT REFERENCES users(user_id), 
          sum NUMERIC(10, 2),
          status VARCHAR(20) DEFAULT 'pending',
          created_at TIMESTAMP DEFAULT NOW()
        )`);
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã withdraws (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
          err
        );
      }

      // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞

      try {
        await pool.query(`CREATE TABLE IF NOT EXISTS ref_balances (
          id SERIAL PRIMARY KEY,
          user_id BIGINT REFERENCES users(user_id) UNIQUE,
          referral_link VARCHAR(100),
          balance NUMERIC(10, 2),
          created_at TIMESTAMP DEFAULT NOW()
        )`);
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ref_balances (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
          err
        );
      }

      // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–≤–æ–¥–∞—ä —Ä–µ—Ñ

      try {
        await pool.query(`CREATE TABLE IF NOT EXISTS ref_withdraws (
          id SERIAL PRIMARY KEY,
          user_id BIGINT REFERENCES users(user_id),
          amount DECIMAL(12,2),
          status VARCHAR(20),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP 
          )`);
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ref_withdraws (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
          err
        );
      }

      // –¢–∞–±–ª–∏—Ü–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤

      try {
        await pool.query(`CREATE TABLE IF NOT EXISTS deposits (
          id SERIAL PRIMARY KEY,
          user_id BIGINT REFERENCES users(user_id),
          amount DECIMAL(12, 2) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`);
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã deposits (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
          err
        );
      }

      break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Å—ë –æ–∫
    } catch (err) {
      retries++;
      console.error(
        `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}):`,
        err
      );
      if (retries === maxRetries) {
        throw new Error(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
        );
      }
      await new Promise((resolve) => setTimeout(resolve, 2000)); // –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    }
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
initDatabase();

export const query = (text: string, params?: any[]) => pool.query(text, params);

export default pool;

app.use(express.json());
const ROWS = 5;
const COLS = 5;
const HOUSE_EDGE = 0.2;
let i = 0;
// HERE START APP WORK STATES
const coefficients = {
  3: [
    1.07, 1.23, 1.41, 1.64, 1.91, 2.25, 2.67, 3.21, 3.9, 4.8, 6, 7.63, 9.93,
    13.24, 18.2, 26.01, 39.01, 62.42, 109.25, 218.5, 546.25, 2185,
  ],
  5: [
    1.18, 1.5, 1.91, 2.48, 3.25, 4.34, 5.89, 8.15, 11.55, 16.8, 25.21, 39.21,
    63.72, 109.24, 200.29, 400.58, 901.31, 2403.49, 8412.24, 50473.49,
  ],
  7: [
    1.31, 1.86, 2.67, 3.92, 5.89, 9.06, 14.34, 23.48, 39.91, 70.96, 133.06,
    266.12, 576.59, 1383.83, 3805.54, 12685.13, 57083.12, 456665,
  ],
  9: [
    1.48, 2.37, 3.9, 6.6, 11.55, 21, 39.91, 79.83, 169.65, 387.77, 969.44,
    2714.44, 8821.93, 35287.74, 194082.62, 1940826.24,
  ],
  12: [
    1.82, 3.65, 7.63, 16.8, 39.21, 98.04, 266.12, 798.36, 2714.44, 10857.76,
    54288.84, 380021.92, 4940284.99,
  ],
  17: [2.96, 10.17, 39.01, 171.67, 901.31, 6008.75, 57083.12, 1027496.25],
};

enum Actions {
  BACKTOMENU = "back_to_menu",
  CHANGEBET = "change_bet",
  MINESMENU = "mines_menu",
  DICEMENU = "dice_menu",
  DEPOSIT = "deposit",
  WITHDRAW = "withdraw",
  PLAY = "play",
  PROFILE = "profile",
  STARTTOPLAYMINES = "play_mines",
  CHANGEMINESCOUNT = "change_mines_count",
  BACKTOMINEMENU = "back_to_mines_menu",
  COLLECTWINMINESBOT = "collect_win",
  BACKTOGAMESMENU = "back_to_games_menu",
  EVENDICE = "even_dice",
  ODDDICE = "odd_dice",
  MOREDICE = "more_dice",
  LESSDICE = "less_dice",
  BACKTODICEMENU = "back_to_dice_menu",
  CRYPTOBOT = "crypto_bot",
  OPENPRICEMENUFORWITHDRAW = "open_price_menu_for_withdraw",
  GETDEPOSITAMOUNTMENU = "get_deposit_amount_menu",
  OPEN_ACTIVE_REFERALS = "open_active_referrals",
  REFFERAL_USER_MENU = "referal_user_menu",
  WITHDRAW_REFERALS_CASH = "withdraw_referals_cash",
}

enum NAVSTATES {
  MAINMENU = "mainMenu",
  PROFILEMENU = "profileMenu",
  GAMESMENU = "gamesMenu",
  MINESMENU = "minesMenu",
  DICEMENU = "diceMenu",
  MINESGAME = "minesGame",
  CHANGEMINESCOUNT = "changeMinesCount",
  COLLECTEDCASH = "collectedCash",
  DICEGAME = "diceGame",
  DEPOSIT = "deposit",
  WITHDRAW = "withdraw",
  CHANGEBET = "changeBet",
  OPENPRICEMENUFORWITHDRAW = "openPriceMenuForWithdraw",
  REFFERAL_USER_MENU = "referal_user_menu",
  OPEN_ACTIVE_REFERALS = "open_active_referrals",
  GETDEPOSITAMOUNTMENU = "get_deposit_amount_menu",
  WITHDRAW_REFERALS_CASH = "withdraw_referals_cash",
}

enum GAMES {
  MINES = "mines",
  DICE = "dice",
}

enum DICEGAMETYPES {
  EVEN = "even",
  ODD = "odd",
  MORE = "more",
  LESS = "less",
}

const clickedCells = new Map<string, string>();

// üìå 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

function createKeyboard(winBet: number) {
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  const fieldButtons = Array.from({ length: ROWS }, (_, row) =>
    Array.from({ length: COLS }, (_, col) =>
      Markup.button.callback("‚¨ú", `cell_${row}_${col}`)
    )
  );

  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
  const collectButton = [
    Markup.button.callback(`–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à ${winBet} USDT`, "collect_win"),
  ];

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
  return Markup.inlineKeyboard([...fieldButtons, collectButton]);
}

class GameSession {
  user: any;
  gameName: GAMES;
  constructor(user: any, gameName: GAMES) {
    this.user = user;
    this.gameName = gameName;
  }

  startGame(ctx: Context) {
    if (this.gameName === GAMES.MINES) {
      const game = new MineGameSession(
        this.user,
        this.user.selectedMinesCount,
        this.user.bet
      );

      this.user.currentGame = game;
      game.startGame(ctx);
    }
    if (this.gameName === GAMES.DICE) {
      const game = new DiceGameSession(this.user, this.user.selectedDiceType);

      this.user.currentGame = game;
      game.startGame(ctx);
    }
  }
}

class DiceGameSession {
  user: any;
  gameType: DICEGAMETYPES;
  constructor(user: any, gameType: DICEGAMETYPES) {
    this.user = user;
    this.gameType = gameType;
  }
  startGame(ctx: Context) {
    console.log(this.gameType);
    this.user.updateBalance(-this.user.bet);
    if (this.gameType === DICEGAMETYPES.EVEN) {
      const win = Math.random() < 0.4;
      if (win) {
        this.user.updateBalance(this.user.bet * 1.8);
        ctx.editMessageText(
          `–í—ã–ø–∞–ª–æ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. \n–í–∞—à –≤—ã–∏–≥—Ä—ã—à ${
            this.user.bet * 1.8
          } USDT üéâ`,

          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
      if (!win) {
        ctx.editMessageText(
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–ø–∞–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
    }
    if (this.gameType === DICEGAMETYPES.ODD) {
      const win = Math.random() < 0.4; // —à–∞–Ω—Å –Ω–∞ –≤—ñ–π–≥—Ä–∞—à
      if (win) {
        this.user.updateBalance(this.user.bet * 1.8);
        ctx.editMessageText(
          `–í—ã–ø–∞–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. \n–í–∞—à –≤—ã–∏–≥—Ä—ã—à ${
            this.user.bet * 1.8
          } USDT üéâ`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
      if (!win) {
        ctx.editMessageText(
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–ø–∞–ª–æ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
    }
    if (this.gameType === DICEGAMETYPES.MORE) {
      const win = Math.random() < 0.4;
      if (win) {
        this.user.updateBalance(this.user.bet * 1.8);

        ctx.editMessageText(
          `
        –í—ã–ø–∞–ª–æ –±–æ–ª—å—à–µ, –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. \n –í–∞—à –≤—ã–∏–≥—Ä—ã—à ${
          this.user.bet * 1.8
        } USDT üéâ`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
      if (!win) {
        ctx.editMessageText(
          `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–ø–∞–ª–æ –º–µ–Ω—å—à–µ, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòû`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
                Actions.BACKTOGAMESMENU
              ),
            ],
          ])
        );
      }
    }
    if (this.gameType === DICEGAMETYPES.LESS) {
    }
  }
}

class MineGameSession {
  user: any;
  selectedMinesCount: "3" | "5" | "7" | "9" | "12" | "17";
  bet: number;
  nextWin: number;
  revealedCells: Map<string, string>; // –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –∏ –∏—Ö –∏–∫–æ–Ω–∫–∏
  constructor(
    user: any,
    selectedMinesCount: "3" | "5" | "7" | "9" | "12" | "17",
    bet: number
  ) {
    this.user = user;
    this.selectedMinesCount = selectedMinesCount;
    this.bet = bet;
    this.nextWin = 0;
    this.revealedCells = new Map();
  }

  getMineProbability(): number {
    console.log(this.revealedCells);
    const totalCells = ROWS * COLS;
    const openedCells = this.revealedCells.size;
    const minesCount = parseInt(this.selectedMinesCount, 10);
    const remainingCells = totalCells - openedCells;
    const remainingMines = minesCount - this.revealedCells.size; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ revealedCells —Ö—Ä–∞–Ω–∏—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–∏–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    const startLoseVariant =
      minesCount === 3
        ? 0.35
        : minesCount === 5
        ? 0.4
        : minesCount === 7
        ? 0.45
        : minesCount === 9
        ? 0.5
        : minesCount === 12
        ? 0.6
        : minesCount === 17
        ? 0.7
        : 0.7;
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —à–∞–Ω—Å (–∫–∞–∂–¥–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞ 0.5%)
    const increasePerOpen = 0.05; // 0.5% –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ

    // –®–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    let probabilityIncrease = openedCells * increasePerOpen;

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —à–∞–Ω—Å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100% –∏ —É—á–∏—Ç—ã–≤–∞–µ–º "—Ö–∞—É—Å–µ–¥–∂–∏"
    let totalProbability = startLoseVariant + probabilityIncrease;

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —è—á–µ–µ–∫ —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω (–ø–ª—é—Å 1), —à–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%
    if (remainingCells <= remainingMines + 1) {
      totalProbability = 1;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —à–∞–Ω—Å, –æ–≥—Ä–∞–Ω–∏—á–∏–≤ –µ–≥–æ –æ—Ç 0 –¥–æ 1
    return Math.min(totalProbability, 1);
  }

  getNextCoef() {
    const totalCells = ROWS * COLS;
    const openedCells = this.revealedCells.size;
    const minesCount = parseInt(this.selectedMinesCount, 10);

    const coefs = coefficients[minesCount as 3 | 5 | 7 | 9 | 12 | 17] || [];
    const coeficient = coefs[openedCells];
    console.log(coeficient);
    return coeficient;
  }

  getWinCash() {
    const openedCells = this.revealedCells.size;
    const minesCount = parseInt(this.selectedMinesCount, 10);

    const coefs = coefficients[minesCount as 3 | 5 | 7 | 9 | 12 | 17] || [];
    const coeficient = coefs[openedCells - 1] || 1;
    return this.bet * coeficient;
  }

  collectWinCash(ctx: Context, user: any) {
    const cash = this.getWinCash();
    const newCash = cash - user.bet;
    user.updateBalance(newCash);
    console.log(newCash);
    return ctx.editMessageText(
      `üéâ –ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${cash.toFixed(
        2
      )} USDT\n üí∏ –í—ã–∏–≥—Ä—ã—à –Ω–∞—á–∏—Å–ª–µ–Ω –≤ –≤–∞—à –±–∞–ª–∞–Ω—Å
`,
      Markup.inlineKeyboard([
        [Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º", Actions.BACKTOGAMESMENU)],
      ])
    );
  }

  handleCellClick(
    row: number,
    col: number
  ): { isMine: boolean; newIcon: string } {
    const cellId = `${row}_${col}`;
    console.log(this.getNextCoef());
    if (this.revealedCells.has(cellId)) {
      return { isMine: false, newIcon: this.revealedCells.get(cellId)! };
    }

    const isMine = Math.random() < this.getMineProbability();
    console.log(this.getMineProbability());
    const newIcon = isMine ? "üí£" : "‚úÖ";

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏—è
    this.revealedCells.set(cellId, newIcon);

    return { isMine, newIcon };
  }

  getUpdatedKeyboard() {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    const fieldButtons = Array.from({ length: ROWS }, (_, row) =>
      Array.from({ length: COLS }, (_, col) => {
        const cellId = `${row}_${col}`;
        const icon = this.revealedCells.get(cellId) || "‚¨ú"; // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "‚¨ú"
        return Markup.button.callback(icon, `cell_${row}_${col}`);
      })
    );

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
    const collectButton = [
      Markup.button.callback(
        `–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à ${this.getWinCash().toFixed(2)} USDT`,
        "collect_win"
      ),
    ];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
    return Markup.inlineKeyboard([...fieldButtons, collectButton]);
  }

  startGame(ctx: Context) {
    ctx.editMessageText(
      `üí£ –ú–∏–Ω—ã ¬∑ ${this.selectedMinesCount} \n üí∞ –í—ã–∏–≥—Ä—ã—à ¬∑ ${
        this.bet
      } ‚Üí ${this.getWinCash()} USDT \n üìä –°–ª–µ–¥—É—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ¬∑ ${this.getNextCoef()} `,
      createKeyboard(this.bet)
    );
  }
}

class Refferal {
  referral_link: string;
  bet: number;
  constructor(userId: string, bet: number) {
    this.referral_link = `https://t.me/games_rocket_bot?start=${userId}`;
    this.bet = bet;
  }

  async save() {
    try {
      await query(
        `
      INSERT INTO referrals 
        (referral_link, bet)
      VALUES ($1, $2)
      RETURNING *;
          `,
        [this.referral_link, this.bet]
      );
      console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    }
  }
  /// ADD REFERRAL DEPOSIT TO REF_BALANCES
  async addRefferDeposit(amount: number, userId: string) {
    try {
      await query(
        `
      INSERT INTO ref_balances 
        (user_id, referral_link, balance)
      VALUES ($1, $2, $3)
      ON CONFLICT (user_id) DO UPDATE SET
        balance = ref_balances.balance + $3
          `,
        [userId, this.referral_link, amount]
      );
      console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:", error);
    }
    console.log("userId in Method", userId);
    const userIdToString = userId.toString();
    const referral = new Refferal(userIdToString, amount);
    await referral.save();
  }
}

class UserSession {
  userId: any;
  selectedMinesCount: string;
  navstate: string;
  bet: number;
  currentGame: GameSession | null;
  selectedDiceType: DICEGAMETYPES;
  balance: number;
  depositAmount: number | null;
  referral_link: string;
  referrer_id: any;
  refprocent: number;
  constructor(userId: any, referrer_id: any) {
    this.userId = userId;
    this.depositAmount = 0;
    this.selectedMinesCount = "3"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.navstate = NAVSTATES.MAINMENU;
    this.selectedDiceType = DICEGAMETYPES.EVEN;
    this.bet = 0;
    this.balance = 0;
    this.currentGame = null;
    this.referral_link = `https://t.me/games_rocket_bot?start=${userId}
 `;
    this.refprocent = 10;
    this.referrer_id = referrer_id;
  }

  async load() {
    try {
      const res = await query("SELECT * FROM users WHERE user_id = $1", [
        this.userId,
      ]);
      if (res.rows.length > 0) {
        const data = res.rows[0];
        this.selectedMinesCount = data.selected_mines_count || "3";
        this.navstate = data.nav_state || NAVSTATES.MAINMENU; // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º MAINMENU
        this.bet = parseFloat(data.bet) || 0;
        this.selectedDiceType =
          (data.selected_dice_type as DICEGAMETYPES) || DICEGAMETYPES.EVEN;
        this.balance = parseFloat(data.balance) || 0;
        this.referrer_id = data.referrer_id;
        this.referral_link = data.referral_link;
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        await this.save();
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    }
  }

  async save() {
    console.log("userrId", this.userId);
    console.log(typeof this.userId);
    const safeReferrerId = this.referrer_id === "" ? null : this.referrer_id;
    try {
      await query(
        `
        INSERT INTO users 
          (user_id, selected_mines_count, nav_state, bet, selected_dice_type, balance, refprocent)
        VALUES ($1, $2, $3, $4, $5, $6, $9)
        ON CONFLICT (user_id) DO UPDATE SET
          selected_mines_count = $2,
          nav_state = $3,
          bet = $4,
          selected_dice_type = $5,
          balance = $6,
          referral_link = $7,
          referrer_id = $8,
          refprocent = $9,
          updated_at = NOW()
          
      `,
        [
          this.userId,
          this.selectedMinesCount,
          this.navstate,
          this.bet,
          this.selectedDiceType,
          this.balance,
          this.referral_link,
          safeReferrerId,
          this.refprocent,
        ]
      );
      console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    }
  }

  async setBet(newBet: number) {
    this.bet = newBet;
    await this.save();
  }

  async updateBalance(amount: number) {
    this.balance += amount;
    await this.save();
  }

  async updateRefferalBalance(amount: number) {
    console.log(this.referral_link);
    try {
      await query(`UPDATE referrals SET bet = 0 WHERE referral_link = $1;`, [
        this.referral_link,
      ]);
    } catch (err) {
      console.log(err);
    }
  }

  async withdrawFunds(ctx: Context, amount: string) {
    try {
      console.log("withdrawFunds: –í—Ö–æ–¥–Ω–æ–π amount:", typeof amount);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ –∏ –Ω–µ undefined

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏ –±–∞–ª–∞–Ω—Å
      const NumberAmount = parseFloat(amount);
      console.log(NumberAmount);
      if (NumberAmount < 3) {
        throw new Error("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî 3 USDT"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 3 –Ω–∞ 0.01 –¥–ª—è —Ç–µ—Å—Ç–∞
      }
      if (NumberAmount > this.balance) {
        throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ");
      }
      const newAmount = NumberAmount * 0.95;

      // SSS

      try {
        await query(
          `INSERT INTO  withdraws (user_id, sum)
          VALUES ($1, $2)
        `,
          [this.userId, newAmount]
        );
        console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        return ctx.reply(
          `‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n` +
            `–°—É–º–º–∞: ${NumberAmount} USDT\n`,
          Markup.inlineKeyboard([
            [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
          ])
        );
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ :", err);
      }

      // SSS

      // // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º transfer
      // console.log("withdrawFunds: amount –ø–µ—Ä–µ–¥ transfer:", amount);
      // const newSpendId =
      //   Date.now().toString() + Math.random().toString(36).substring(2, 15);
      // // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ CryptoBotAPI
      // console.log(this.userId);
      // const objectTransfer = {
      //   userId: this.userId,
      //   asset: "USDT",
      //   amount: newAmount.toString(),
      //   spendId: newSpendId,
      // };
      // console.log(objectTransfer);
      // const transfer = await cryptoClient.transfer(objectTransfer);

      // // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // await this.updateBalance(-NumberAmount);

      // // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ
      // await ctx.reply(
      //   `‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n` +
      //     `–°—É–º–º–∞: ${NumberAmount} USDT\n` +
      //     `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.balance.toFixed(2)} USDT\n` +
      //     `–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ @CryptoBot.`,
      //   Markup.inlineKeyboard([
      //     [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      //   ])
      // );

      // return transfer;
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:", error);
      throw error;
    }
  }

  getUserProfile(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `üÜî –í–∞—à ID: ${user.userId} \nüè¶ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} USDT`,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }

  getWithdrawMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞",
      Markup.inlineKeyboard([
        [Markup.button.callback("CryptoBot", Actions.OPENPRICEMENUFORWITHDRAW)],
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }

  getOpenPriceMenuForWithdraw(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      "–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –≤—ã–≤–æ–¥–∞ –≤ USDT (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ 3 USDT) –∫–æ–º–∏—Å–∏—è 5%",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }

  async startWithdraw(ctx: Context, user: UserSession) {
    ctx.editMessageText("–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏");
  }

  getDiceMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `–†–ï–ñ–ò–ú:üé≤ –ö—É–±–∏–∫–∏

1) "üé≤ –ß–µ—Ç–Ω–æ–µ - 1.8x" - –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ 2, 4, 6
2) "üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ - 1.8x" - –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ 1, 3, 5

3) "üé≤ –ë–æ–ª—å—à–µ - 1.8x" - –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ 4, 5, 6
4) "üé≤ –ú–µ–Ω—å—à–µ - 1.8x" - –≤—ã–∏–≥—Ä—ã—à –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ 1, 2, 3
`,

      Markup.inlineKeyboard([
        [
          Markup.button.callback("üé≤ –ß–µ—Ç–Ω–æ–µ  - 1.8x", Actions.EVENDICE),
          Markup.button.callback("üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ - 1.8x", Actions.ODDDICE),
        ],
        [
          Markup.button.callback("üé≤ –ë–æ–ª—å—à–µ - 1.8x", Actions.MOREDICE),
          Markup.button.callback("üé≤ –ú–µ–Ω—å—à–µ - 1.8x", Actions.LESSDICE),
        ],
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOGAMESMENU)],
      ])
    );
  }

  getAmountOfDepositMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–Ω (0.5 USDT)");
  }

  async createInvoice(user: UserSession) {
    const amount = user.depositAmount?.toString();
    const invoice = await cryptoClient.createInvoice({
      asset: "USDT",
      amount: amount,
      description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Casino Rocket",
      payload: JSON.stringify({ userId: this.userId }),
    });
    return invoice; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å pay_url –∏ –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  }

  async OpenCryptoBot(ctx: Context, user: UserSession) {
    const invoice = await this.createInvoice(user);
    ctx.reply(
      "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: @CryptoBot \n \nüëá –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
      {
        reply_markup: {
          inline_keyboard: [[{ text: "–û–ø–ª–∞—Ç–∏—Ç—å", url: invoice.botPayUrl }]],
        },
      }
    );
  }

  async getDepositMenu(ctx: Context, user: UserSession) {
    ctx.reply(
      "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
      Markup.inlineKeyboard([
        Markup.button.callback("Crypto bot", Actions.CRYPTOBOT),
      ])
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
  async setMinesCount(count: string) {
    this.selectedMinesCount = count;
    await this.save();
  }

  async getWithdrawReferalsMenu(ctx: Context, user: UserSession) {
    const res = await query(
      "SELECT * FROM referrals WHERE referral_link = $1",
      [user.referral_link]
    );
    const sum = res.rows.reduce((acc, row) => acc + parseFloat(row.bet), 0);
    const newSum = sum * user.refprocent;
    if (newSum <= 1) {
      await ctx.editMessageText(
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1 USDT`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.REFFERAL_USER_MENU)],
        ])
      );
      return;
    } else {
      await this.updateBalance(newSum);
      await this.updateRefferalBalance(newSum);
      await ctx.editMessageText(
        `–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –í –º–µ–Ω—é", Actions.BACKTOMENU)],
        ])
      );
    }
  }

  async getActiveRefferalUsers(user: UserSession) {
    const res = await query(
      "SELECT * FROM referrals WHERE referral_link = $1",
      [user.referral_link]
    );
    const sum = res.rows.reduce((acc, row) => acc + parseFloat(row.bet), 0);
    const newSum = sum * user.refprocent;
    console.log("userreflink", user.referral_link);
    console.log(res.rows);

    return newSum;
  }

  async getActiveRefferalUserMenu(ctx: Context, user: UserSession) {
    const referrals = await this.getActiveRefferalUsers(user);

    if (referrals <= 0) {
      await ctx.editMessageText(
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.REFFERAL_USER_MENU)],
        ])
      );
      return;
    }

    // const list = referrals
    //   .map((r, i) => `${i + 1}. ${r.username ?? "–ë–µ–∑ –∏–º–µ–Ω–∏"} (ID: ${r.id})`)
    //   .join("\n");

    // await ctx.editMessageText(`–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n${list}`);
    await ctx.editMessageText(
      `–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:
    
    üí∏ *–°—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* \`${referrals} USDT\`
    `,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.REFFERAL_USER_MENU)],
          [
            Markup.button.callback(
              "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç",
              Actions.WITHDRAW_REFERALS_CASH
            ),
          ],
        ]).reply_markup,
      }
    );
  }

  async getRefferalUserMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
      
üí∞ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ % –æ—Ç –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!
      
–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç = ${user.refprocent}%
üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º:
https://t.me/${ctx.botInfo.username}?start=${user.userId}
      `,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        [
          Markup.button.callback(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
            Actions.OPEN_ACTIVE_REFERALS
          ),
        ],
      ])
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é "–ú–∏–Ω—ã"
  getMinesMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `üí• –ò–≥—Ä–∞ "–ú–∏–Ω—ã" üí•
      
üí£ –í—ã–±—Ä–∞–Ω–æ ${user.selectedMinesCount} –º–∏–Ω—ã
üéØ –¶–µ–ª—å: –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏, –∏–∑–±–µ–≥–∞–π—Ç–µ –º–∏–Ω –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à. –ß–µ–º –±–æ–ª—å—à–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –æ—Ç–∫—Ä–æ–µ—Ç–µ ‚Äì —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!
      
      
üöÄ –£–¥–∞—á–∏! –ü—É—Å—Ç—å —Ñ–æ—Ä—Ç—É–Ω–∞ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üé≤
      `,
      Markup.inlineKeyboard([
        [
          Markup.button.callback("üí£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", Actions.STARTTOPLAYMINES),
          Markup.button.callback(
            `–ò–∑–º–µ–Ω–∏—Ç—å ¬∑ ${this.selectedMinesCount}üí£`,
            Actions.CHANGEMINESCOUNT
          ),
        ],

        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–∏–Ω
  getMinesSelectionMenu() {
    return Markup.inlineKeyboard([
      ["3", "5", "7"].map((num) =>
        Markup.button.callback(
          num == this.selectedMinesCount ? `üí£ ${num}` : num,
          num
        )
      ),
      ["9", "12", "17"].map((num) =>
        Markup.button.callback(
          num == this.selectedMinesCount ? `üí£ ${num}` : num,
          num
        )
      ),
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMINEMENU)],
    ]);
  }

  getChangeBetMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É`,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }

  getGamesMenu(ctx: Context, user: UserSession) {
    ctx.editMessageText(
      `üÜî –í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º üéÆ \n \nüè¶ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(
        2
      )} USDT\n \nüí∏ –°—Ç–∞–≤–∫–∞: ${user.bet} USDT`,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", Actions.CHANGEBET)],
        [
          Markup.button.callback("üí£ –ú–∏–Ω—ã", Actions.MINESMENU),
          Markup.button.callback("üé≤ –ö—É–±–∏–∫–∏", Actions.DICEMENU),
        ],
        [
          Markup.button.callback(
            "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
            Actions.GETDEPOSITAMOUNTMENU
          ),
        ],
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
      ])
    );
  }
}

// üìå 2Ô∏è‚É£ –•—Ä–∞–Ω–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∂–¥—ã–π —é–∑–µ—Ä - –æ–±—ä–µ–∫—Ç `UserSession`)
const users = new Map();

async function setWebhook() {
  const webhookUrl = "https://4381-193-107-107-78.ngrok-free.app/webhook"; // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
  try {
    await axios.post(
      `${cryptoPayApiUrl}/setWebhook`,
      { url: webhookUrl },
      {
        headers: {
          "Crypto-Pay-API-Token": cryptoPayToken,
          "Content-Type": "application/json",
        },
      }
    );
    console.log("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:", error);
  }
}

app.post("/webhook", async (req: any, res: any) => {
  console.log("–í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω:", JSON.stringify(req.body, null, 2));

  const update = req.body;

  if (update.payload && update.payload.status === "paid") {
    console.log("–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", update.payload);
    const amount = parseFloat(update.payload.amount);
    const payload = JSON.parse(update.payload.payload);
    const userId = payload.userId;

    const user = users.get(userId);
    if (user) {
      if (user.referrer_id != null) {
        const reffer = new Refferal(user.referrer_id, amount);
        console.log(user);
        reffer.addRefferDeposit(amount, user.referrer_id);
        console.log("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É", amount);
      }
      try {
        await pool.query(
          "INSERT INTO deposits (user_id, amount) VALUES ($1, $2)",
          [userId, amount]
        );
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É deposits", err);
      }
      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${amount}`);
      await user.updateBalance(amount);
      await bot.telegram.sendMessage(
        user.userId,
        `‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å: ${user.balance.toFixed(
          2
        )} USDT`,
        Markup.inlineKeyboard([
          [Markup.button.callback("üïπÔ∏è –ò–≥—Ä–∞—Ç—å", Actions.BACKTOGAMESMENU)],
        ])
      );
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", userId);
    } else {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  } else {
    console.log("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ payload –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:", update);
  }

  res.sendStatus(200);
});

// üìå 3Ô∏è‚É£ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é
function mainMenu() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üé∞ –ò–≥—Ä–∞—Ç—å", Actions.PLAY)],
    [
      Markup.button.callback("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", Actions.GETDEPOSITAMOUNTMENU),
      Markup.button.callback("üí∏ –í—ã–≤–µ—Å—Ç–∏", Actions.WITHDRAW),
    ],
    [
      Markup.button.callback(
        "üßë‚Äçü§ù‚Äçüßë –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        Actions.REFFERAL_USER_MENU
      ),
    ],
    [Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", Actions.PROFILE)],
  ]);
}

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const startPayload = ctx.startPayload;
  let referrer_id = null;

  if (startPayload != null && startPayload != undefined) {
    referrer_id = startPayload;
  }
  let user = users.get(userId);
  if (!user) {
    user = new UserSession(userId, referrer_id);
    await user.load();
    users.set(userId, user);
  }

  if (user.balance === 0) {
    await user.save();
  }

  ctx.reply(
    `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Rocket! üöÄ

–ó–¥–µ—Å—å –≤–∞—Å –∂–¥—É—Ç –∞–∑–∞—Ä—Ç, –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –∫—É—à!

üí∞ –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ @CryptoBot, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—ã–µ, –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

üé≤ –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Å Casino Rocket! üöÄüî•

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üì∞ –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @gamesrocketnews

ü§ë –ö–∞–Ω–∞–ª —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: @rocketgamesbet

ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rocket_games_admin

`,
    mainMenu()
  );
});

// bot.hears("üé∞ –ò–≥—Ä–∞—Ç—å", (ctx) => ctx.reply("üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã..."));
// bot.hears("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", (ctx) => ctx.reply("üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞..."));
// bot.hears("üí∏ –í—ã–≤–µ—Å—Ç–∏", (ctx) => ctx.reply("üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤..."));

bot.action(Actions.BACKTOGAMESMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.GAMESMENU;
  await user.getGamesMenu(ctx, user);
});

bot.hears(/^\d+(\.\d+)?$/, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
  if (user.navstate === NAVSTATES.CHANGEBET) {
    const newBet = parseFloat(ctx.message.text);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º, –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –±–∞–ª–∞–Ω—Å—É
    if (!isNaN(newBet) && newBet > 0 && newBet <= user.balance) {
      await user.setBet(newBet); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      user.navstate = NAVSTATES.GAMESMENU; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∏–≥—Ä

      await ctx.reply(
        `‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newBet} USDT`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        ])
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∏–≥—Ä —á–µ—Ä–µ–∑ ctx.reply –≤–º–µ—Å—Ç–æ user.getGamesMenu
      await ctx.reply(
        `üÜî –í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º üéÆ \n \nüè¶ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(
          2
        )} USDT\n \nüí∏ –°—Ç–∞–≤–∫–∞: ${user.bet} USDT`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", Actions.CHANGEBET)],
          [
            Markup.button.callback("üí£ –ú–∏–Ω—ã", Actions.MINESMENU),
            Markup.button.callback("üé≤ –ö—É–±–∏–∫–∏", Actions.DICEMENU),
          ],
          [
            Markup.button.callback(
              "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
              Actions.GETDEPOSITAMOUNTMENU
            ),
          ],
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        ])
      );
    } else if (newBet > user.balance) {
      await ctx.reply(
        `‚ùå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ (${newBet} USDT) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å (${user.balance.toFixed(
          2
        )} USDT). –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        ])
      );
    } else {
      await ctx.reply(
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5)`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        ])
      );
    }
  }

  if (user.navstate === NAVSTATES.GETDEPOSITAMOUNTMENU) {
    const depositAmount = parseFloat(ctx.message.text);
    try {
      if (depositAmount < 0.1) {
        return ctx.reply(
          "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 0.5 USDT",
          Markup.inlineKeyboard([
            [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
          ])
        );
      } else {
        user.navstate = NAVSTATES.DEPOSIT;
        user.depositAmount = depositAmount;
        user.getDepositMenu(ctx, user, depositAmount);
      }
    } catch (error) {}
  }

  if (user.navstate === NAVSTATES.OPENPRICEMENUFORWITHDRAW) {
    const withdrawAmount = parseFloat(ctx.message.text);
    try {
      if (!isNaN(withdrawAmount) && withdrawAmount > 0) {
        // const withdrawAmountWithString = withdrawAmount.toString();
        const withdrawAmountWithString = String(withdrawAmount);
        await user.withdrawFunds(ctx, withdrawAmountWithString);
        user.navstate = NAVSTATES.MAINMENU; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞
      } else {
        await ctx.reply(
          `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5)`,
          Markup.inlineKeyboard([
            [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
          ])
        );
      }
    } catch (error: any) {
      await ctx.reply(
        `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", Actions.BACKTOMENU)],
        ])
      );
    }
  }
});

bot.action(Actions.OPEN_ACTIVE_REFERALS, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.OPEN_ACTIVE_REFERALS;
  await user.getActiveRefferalUserMenu(ctx, user);
});

bot.action(Actions.MINESMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.MINESMENU; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤ –º–µ–Ω—é –º–∏–Ω
  await user.getMinesMenu(ctx, user);
});

bot.action(Actions.WITHDRAW_REFERALS_CASH, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.WITHDRAW_REFERALS_CASH;
  await user.getWithdrawReferalsMenu(ctx, user);
});

bot.action(Actions.WITHDRAW, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.WITHDRAW;
  await user.getWithdrawMenu(ctx, user);
});

bot.action(Actions.OPENPRICEMENUFORWITHDRAW, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.OPENPRICEMENUFORWITHDRAW;
  await user.getOpenPriceMenuForWithdraw(ctx, user);
});

bot.action(Actions.CHANGEBET, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.CHANGEBET;
  await user.getChangeBetMenu(ctx, user);
});

bot.action(Actions.COLLECTWINMINESBOT, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.COLLECTEDCASH;
  const game = user.currentGame;

  await game.collectWinCash(ctx, user);
});

bot.action(Actions.DEPOSIT, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.DEPOSIT;
  await user.getDepositMenu(ctx, user);
});

bot.action(Actions.GETDEPOSITAMOUNTMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.GETDEPOSITAMOUNTMENU;
  await user.getAmountOfDepositMenu(ctx, user);
});

bot.action(/^cell_(\d+)_(\d+)$/, async (ctx) => {
  const [, row, col] = ctx.match;
  const cellId = `${row}_${col}`;
  const userId = ctx.from.id;
  const user = users.get(userId);
  if (user.navstate === NAVSTATES.MINESGAME) {
    const game = user.currentGame;
    const result = game.handleCellClick(parseInt(row, 10), parseInt(col, 10));

    if (result.isMine) {
      user.updateBalance(-user.bet);
      // –ï—Å–ª–∏ —ç—Ç–æ –º–∏–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
      await ctx.editMessageText(
        `üí• –í—ã –Ω–∞—à–ª–∏ –º–∏–Ω—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n `,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º",
              Actions.BACKTOGAMESMENU
            ),
          ],
        ])
      );
      user.navstate = NAVSTATES.MAINMENU; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    } else {
      // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      await ctx.editMessageText(
        `üí£ –ú–∏–Ω—ã ¬∑ ${user.selectedMinesCount} \n üí∞ –í—ã–∏–≥—Ä—ã—à ¬∑ ${
          user.bet
        } ‚Üí ${game.getWinCash()} USDT \n üìä –°–ª–µ–¥—É—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ¬∑ ${game.getNextCoef()} `,
        game.getUpdatedKeyboard()
      );
    }
  }
});

bot.action(Actions.CHANGEMINESCOUNT, (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.CHANGEMINESCOUNT; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —é–∑–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –º–∏–Ω—ã
  ctx.editMessageText(
    "üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω:",
    user.getMinesSelectionMenu()
  );
});

bot.action(Actions.REFFERAL_USER_MENU, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = users.get(userId);
    user.navstate = NAVSTATES.REFFERAL_USER_MENU;
    await user.getRefferalUserMenu(ctx, user);
  } catch (error) {
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

bot.action(Actions.BACKTOMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.MAINMENU;
  await ctx.editMessageText(
    `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Rocket! üöÄ

–ó–¥–µ—Å—å –≤–∞—Å –∂–¥—É—Ç –∞–∑–∞—Ä—Ç, –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –∫—É—à!

üí∞ –í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ @CryptoBot, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—ã–µ, –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

üé≤ –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ —Å Casino Rocket! üöÄüî•

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üì∞ –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @gamesrocketnews

ü§ë –ö–∞–Ω–∞–ª —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: @rocketgamesbet

ü´Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @rocket_games_admin
`,
    mainMenu() // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  );
});

bot.action(Actions.BACKTOMINEMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.MINESGAME;
  await user.getMinesMenu(ctx, user);
});

bot.action(Actions.MINESMENU, async (ctx) => {});

bot.action(["3", "5", "7", "9", "12", "17"], async (ctx: any) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  const mines_count = ctx.match[0];
  user.setMinesCount(mines_count);
  ctx.editMessageText(
    `–¢—ã –≤—ã–±—Ä–∞–ª ${user.selectedMinesCount} –º–∏–Ω!`,
    user.getMinesSelectionMenu()
  );
});

bot.action(Actions.STARTTOPLAYMINES, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);

  if (user.balance < user.bet || user.balance <= 0) {
    ctx.editMessageText("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã", mainMenu());
    user.navstate = NAVSTATES.MAINMENU;
    return;
  }
  user.navstate = NAVSTATES.MINESGAME;
  const gameSession = new GameSession(user, GAMES.MINES);
  gameSession.startGame(ctx);
});

bot.action(Actions.PLAY, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = users.get(userId);
    user.navstate = NAVSTATES.GAMESMENU;

    await user.getGamesMenu(ctx, user);
  } catch (error) {
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã:", error);
  }
});

bot.action(Actions.PROFILE, async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = users.get(userId);
    user.navstate = NAVSTATES.PROFILEMENU;

    await user.getUserProfile(ctx, user);
  } catch (error) {
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

bot.action(Actions.DICEMENU, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.DICEMENU;
  await user.getDiceMenu(ctx, user);
});

bot.action(Actions.CRYPTOBOT, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  user.navstate = NAVSTATES.DEPOSIT;
  await user.OpenCryptoBot(ctx, user);
});

bot.action(Actions.EVENDICE, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  if (user.balance < user.bet || user.balance <= 0) {
    ctx.editMessageText("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã", mainMenu());
    user.navstate = NAVSTATES.MAINMENU;
    return;
  }
  user.navstate = NAVSTATES.DICEGAME;
  user.selectedDiceGameType = DICEGAMETYPES.EVEN;
  const gameSession = new GameSession(user, GAMES.DICE);
  gameSession.startGame(ctx);
});

bot.action(Actions.ODDDICE, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  if (user.balance < user.bet || user.balance <= 0) {
    ctx.editMessageText("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã", mainMenu());
    user.navstate = NAVSTATES.MAINMENU;
    return;
  }
  user.navstate = NAVSTATES.DICEGAME;
  user.selectedDiceGameType = DICEGAMETYPES.ODD;
  const gameSession = new GameSession(user, GAMES.DICE);
  gameSession.startGame(ctx);
});

bot.action(Actions.MOREDICE, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  if (user.balance < user.bet || user.balance <= 0) {
    ctx.editMessageText("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã", mainMenu());
    user.navstate = NAVSTATES.MAINMENU;
    return;
  }
  user.navstate = NAVSTATES.DICEGAME;
  user.selectedDiceGameType = DICEGAMETYPES.MORE;
  const gameSession = new GameSession(user, GAMES.DICE);
  gameSession.startGame(ctx);
});

bot.action(Actions.LESSDICE, async (ctx) => {
  const userId = ctx.from.id;
  const user = users.get(userId);
  if (user.balance < user.bet) {
    ctx.editMessageText("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã", mainMenu());
    user.navstate = NAVSTATES.MAINMENU;
    return;
  }
  user.navstate = NAVSTATES.DICEGAME;
  user.selectedDiceGameType = DICEGAMETYPES.LESS;
  const gameSession = new GameSession(user, GAMES.DICE);
  gameSession.startGame(ctx);
});
const PORT = 4000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ))—Ç—É ${PORT}`);
});

bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply(
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
  );
});

bot
  .launch()
  .then(() => {
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! :))");
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });
